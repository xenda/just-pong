// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Paddle = (function(_super) {

    __extends(Paddle, _super);

    function Paddle(el, board) {
      this.el = el;
      this.board = board;
      this.move = __bind(this.move, this);

      this.steps = 150;
      this.topLimit = 0;
      this.bottomLimit = board.height();
    }

    Paddle.prototype.belowTopBoundaries = function() {
      return this.top() > Math.abs(this.steps);
    };

    Paddle.prototype.aboveBottomBoundaries = function() {
      return (this.top() + this.height() + this.steps) < this.bottomLimit;
    };

    Paddle.prototype.movementTillTop = function() {
      return this.topLimit - this.top();
    };

    Paddle.prototype.movementTillBottom = function() {
      return this.bottomLimit - this.top() - this.height();
    };

    Paddle.prototype.moveUp = function() {
      if (this.belowTopBoundaries()) {
        return this.move(-this.steps);
      } else {
        return this.move(this.movementTillTop());
      }
    };

    Paddle.prototype.moveDown = function() {
      if (this.aboveBottomBoundaries()) {
        return this.move();
      } else {
        return this.move(this.movementTillBottom());
      }
    };

    Paddle.prototype.move = function(steps) {
      if (steps == null) {
        steps = this.steps;
      }
      this.el.stop(true, false);
      this.el.animate({
        'top': "+=" + steps + "px"
      }, {
        easing: 'linear'
      });
      return 10;
    };

    return Paddle;

  })(window.GameObject);

}).call(this);
